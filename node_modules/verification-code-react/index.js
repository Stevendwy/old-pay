"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

require("./verificationcode.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var VerificationCode = function (_Component) {
	_inherits(VerificationCode, _Component);

	function VerificationCode(props) {
		_classCallCheck(this, VerificationCode);

		var _this = _possibleConstructorReturn(this, (VerificationCode.__proto__ || Object.getPrototypeOf(VerificationCode)).call(this, props));

		_this.startTime = props.startTime;
		_this.holdString = props.autoStart ? props.startTime + "s" : props.holdString;
		_this.timer = null;
		_this.isRuning = false;
		_this.className = props.autoStart ? "container-countdown" : "container-countdown stop";

		_this.state = {
			currentTime: props.startTime,
			holdString: _this.holdString
		};
		return _this;
	}

	_createClass(VerificationCode, [{
		key: "componentWillReceiveProps",
		value: function componentWillReceiveProps(nextProps) {
			if (nextProps.restart) {
				clearInterval(this.timer);
				this.isRuning = false;
				this.className = "container-countdown stop";
				this.setState({
					holdString: this.holdString,
					currentTime: this.startTime
				});
			}
		}
	}, {
		key: "componentDidMount",
		value: function componentDidMount() {
			if (this.props.autoStart) this.restart(false);
		}
	}, {
		key: "restart",
		value: function restart(isFromClick) {
			var _this2 = this;

			if (this.isRuning) {
				return;
			} else {
				//do anything in a loop just one time...
				this.props.callback();
			}

			//click should change value intime
			if (isFromClick) {
				this.setState({
					currentTime: this.startTime,
					holdString: null
				});
				this.className = "container-countdown";
			}

			this.isRuning = true;
			this.timer = setInterval(function () {
				var _currentTime = _this2.state.currentTime;
				var _state = null;

				if (_currentTime > 1) {
					_state = {
						currentTime: _currentTime - 1,
						holdString: null
					};
				} else {
					_state = {
						holdString: _this2.holdString,
						currentTime: _this2.startTime
					};
					clearInterval(_this2.timer);
					_this2.isRuning = false;
					_this2.className = "container-countdown stop";
				}

				_this2.setState(_state);
			}, 1000);
		}
	}, {
		key: "render",
		value: function render() {
			var _currentTime = this.state.currentTime;
			var _holdString = this.state.holdString;
			var _defaultValue = _holdString ? _holdString : _currentTime + "s";

			var _restart = this.restart.bind(this, true);

			return _react2.default.createElement("input", {
				className: this.className,
				onClick: _restart,
				type: "button",
				defaultValue: _defaultValue });
		}
	}]);

	return VerificationCode;
}(_react.Component);

exports.default = VerificationCode;


VerificationCode.propTypes = {
	startTime: _propTypes2.default.number.isRequired,
	holdString: _propTypes2.default.string.isRequired,
	callback: _propTypes2.default.func.isRequired,
	autoStart: _propTypes2.default.bool.isRequired
};
